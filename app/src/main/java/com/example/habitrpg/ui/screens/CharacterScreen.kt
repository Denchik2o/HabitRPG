package com.example.habitrpg.ui.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.example.habitrpg.data.model.Character
import com.example.habitrpg.data.model.InventoryItem
import com.example.habitrpg.data.model.Quest
import com.example.habitrpg.utils.SpriteUtils

@Composable
fun CharacterScreen(
    character: Character,
    quests: List<Quest>,
    shopItems: List<InventoryItem>,
    inventoryItems: List<InventoryItem>,
    equippedItems: List<InventoryItem>,
    onAddHabit: () -> Unit,
    onAddDaily: () -> Unit,
    onAddTask: () -> Unit,
    onCompleteQuest: (Quest) -> Unit,
    onFailQuest: (Quest) -> Unit,
    onIncrementHabit: (Quest) -> Unit,
    onDecrementHabit: (Quest) -> Unit,
    onDeleteQuest: (Quest) -> Unit,
    onOpenInventory: () -> Unit,
    onBuyItem: (InventoryItem) -> Unit,
    modifier: Modifier = Modifier
) {
    var selectedTab by remember { mutableStateOf("habits") }
    var questToDelete by remember { mutableStateOf<Quest?>(null) }

    // –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    if (questToDelete != null) {
        AlertDialog(
            onDismissRequest = { questToDelete = null },
            title = { Text("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?") },
            text = { Text("–ó–∞–¥–∞—á–∞ \"${questToDelete!!.title}\" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã –∏ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞.") },
            confirmButton = {
                Button(
                    onClick = {
                        onDeleteQuest(questToDelete!!)
                        questToDelete = null
                    }
                ) {
                    Text("–£–¥–∞–ª–∏—Ç—å")
                }
            },
            dismissButton = {
                Button(
                    onClick = { questToDelete = null }
                ) {
                    Text("–û—Ç–º–µ–Ω–∞")
                }
            }
        )
    }

    Scaffold(
        floatingActionButton = {
            when (selectedTab) {
                "habits" -> {
                    FloatingActionButton(
                        onClick = onAddHabit,
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Icon(Icons.Default.Add, contentDescription = "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
                    }
                }
                "dailies" -> {
                    FloatingActionButton(
                        onClick = onAddDaily,
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Icon(Icons.Default.Add, contentDescription = "–î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É")
                    }
                }
                "tasks" -> {
                    FloatingActionButton(
                        onClick = onAddTask,
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Icon(Icons.Default.Add, contentDescription = "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
                    }
                }
            }
        },
        bottomBar = {
            BottomNavigationBar(
                selectedTab = selectedTab,
                onTabSelected = { selectedTab = it }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            CharacterInfoSection(
                character = character,
                equippedItems = equippedItems,
                onOpenInventory = onOpenInventory,
                modifier = Modifier.padding(16.dp)
            )

            // –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            when (selectedTab) {
                "habits" -> {
                    HabitsContentSection(
                        habits = quests.filter { it.questType == "HABIT" },
                        character = character,
                        onIncrementHabit = onIncrementHabit,
                        onDecrementHabit = onDecrementHabit,
                        onDeleteQuest = { questToDelete = it }
                    )
                }
                "dailies" -> {
                    DailiesContentSection(
                        dailies = quests.filter { it.questType == "DAILY" },
                        character = character,
                        onCompleteQuest = onCompleteQuest,
                        onFailQuest = onFailQuest,
                        onDeleteQuest = { questToDelete = it }
                    )
                }
                "tasks" -> {
                    TasksContentSection(
                        tasks = quests.filter { it.questType == "TASK" },
                        character = character,
                        onCompleteQuest = onCompleteQuest,
                        onFailQuest = onFailQuest,
                        onDeleteQuest = { questToDelete = it }
                    )
                }
                "shop" -> {
                    ShopScreen(
                        character = character,
                        shopItems = shopItems,
                        inventoryItems = inventoryItems,
                        onBuyItem = onBuyItem,
                        modifier = Modifier.fillMaxSize()
                    )
                }
            }
        }
    }
}

@Composable
fun CharacterInfoSection(
    character: Character,
    equippedItems: List<InventoryItem>,
    onOpenInventory: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(modifier = modifier) {
        // –ù–∏–∫–Ω–µ–π–º –∏ –∫–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = character.nickname,
                style = MaterialTheme.typography.headlineMedium,
                fontWeight = FontWeight.Bold
            )

            // –ö–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            IconButton(
                onClick = onOpenInventory,
                modifier = Modifier.size(48.dp)
            ) {
                Text(
                    text = "üéí",
                    style = MaterialTheme.typography.headlineMedium
                )
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // –°–ø—Ä–∞–π—Ç –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ä—è–¥
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(190.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            CharacterSprite(
                character = character,
                equippedItems = equippedItems,
                modifier = Modifier
                    .weight(0.25f)
                    .fillMaxHeight()
            )

            CharacterStats(
                character = character,
                modifier = Modifier
                    .weight(0.6f)
                    .fillMaxHeight()
            )
        }
    }
}

@Composable
fun CharacterSprite(
    character: Character,
    equippedItems: List<InventoryItem>,
    modifier: Modifier = Modifier
) {
    val sortedItems = remember(equippedItems) {
        equippedItems.sortedBy { item ->
            when (item.itemType) {
                com.example.habitrpg.data.model.ItemType.HELMET -> 10
                com.example.habitrpg.data.model.ItemType.BREASTPLATE -> 20
                com.example.habitrpg.data.model.ItemType.GREAVES -> 30

                com.example.habitrpg.data.model.ItemType.ACCESSORY -> 40
                com.example.habitrpg.data.model.ItemType.WEAPON -> 50

                else -> 100
            }
        }
    }

    Box(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        val baseSpriteResId = SpriteUtils.getBaseSpriteForClass(character.characterClass)
        Image(
            painter = painterResource(id = baseSpriteResId),
            contentDescription = "–ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–∞–π—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
            modifier = Modifier
                .size(120.dp)
                .align(Alignment.Center)
        )

        sortedItems.forEach { item ->
            if (item.spriteResId.isNotBlank() &&
                item.itemType != com.example.habitrpg.data.model.ItemType.CONSUMABLE) {

                val itemSpriteResId = SpriteUtils.getSpriteResId(item.spriteResId)
                Image(
                    painter = painterResource(id = itemSpriteResId),
                    contentDescription = "–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${item.name}",
                    modifier = Modifier
                        .size(120.dp)
                        .align(Alignment.Center)
                )
            }
        }

        Text(
            text = getClassDisplayName(character.characterClass),
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(top = 8.dp)
        )
    }
}

@Composable
fun CharacterStats(
    character: Character,
    modifier: Modifier = Modifier
) {
    Card(modifier = modifier) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = "–£—Ä–æ–≤–µ–Ω—å: ${character.level}",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –æ–ø—ã—Ç–∞
            ExperienceBar(
                currentExp = character.exp,
                maxExp = character.getExpForNextLevel(),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 12.dp)
            )

            // HP –∏ –ú–∞–Ω–∞
            StatRow("HP:", "${character.currentHp}/${character.maxHp}")
            StatRow("–ú–∞–Ω–∞:", "${character.currentMp}/${character.maxMp}")

            Spacer(modifier = Modifier.height(8.dp))

            // –ó–æ–ª–æ—Ç–æ, –ê—Ç–∞–∫–∞, –ó–∞—â–∏—Ç–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–ø—Ä–∞–≤–∞
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // –ó–æ–ª–æ—Ç–æ
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(
                        text = "ü™ô",
                        style = MaterialTheme.typography.bodyLarge
                    )
                    Text(
                        text = character.gold.toString(),
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.padding(start = 4.dp)
                    )
                }

                // –ê—Ç–∞–∫–∞
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(
                        text = "üí™",
                        style = MaterialTheme.typography.bodyLarge
                    )
                    Text(
                        text = character.attack.toString(),
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.padding(start = 4.dp)
                    )
                }

                // –ó–∞—â–∏—Ç–∞
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(
                        text = "üõ°Ô∏è",
                        style = MaterialTheme.typography.bodyLarge
                    )
                    Text(
                        text = character.defense.toString(),
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.padding(start = 4.dp)
                    )
                }
            }
        }
    }
}

@Composable
fun ExperienceBar(
    currentExp: Int,
    maxExp: Int,
    modifier: Modifier = Modifier
) {
    val progress = if (maxExp > 0) currentExp.toFloat() / maxExp else 0f

    Column(modifier = modifier) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(8.dp)
                .clip(MaterialTheme.shapes.small)
                .background(Color.Gray.copy(alpha = 0.3f))
        ) {
            // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
            Box(
                modifier = Modifier
                    .fillMaxWidth(progress.coerceIn(0f, 1f))
                    .height(8.dp)
                    .background(MaterialTheme.colorScheme.primary)
            )
        }
    }
}

@Composable
fun StatRow(
    label: String,
    value: String,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 2.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Medium
        )
    }
}

// –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏
@Composable
fun BottomNavigationBar(
    selectedTab: String,
    onTabSelected: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    NavigationBar(modifier = modifier) {
        NavigationBarItem(
            selected = selectedTab == "habits",
            onClick = { onTabSelected("habits") },
            icon = {
                Text(
                    text = "üóø",
                    style = MaterialTheme.typography.titleLarge
                )
            },
            label = { Text("–ü—Ä–∏–≤—ã—á–∫–∏") }
        )

        NavigationBarItem(
            selected = selectedTab == "dailies",
            onClick = { onTabSelected("dailies") },
            icon = {
                Text(
                    text = "üìÖ",
                    style = MaterialTheme.typography.titleLarge
                )
            },
            label = { Text("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ") }
        )

        NavigationBarItem(
            selected = selectedTab == "tasks",
            onClick = { onTabSelected("tasks") },
            icon = {
                Text(
                    text = "‚úÖ",
                    style = MaterialTheme.typography.titleLarge
                )
            },
            label = { Text("–ó–∞–¥–∞—á–∏") }
        )

        NavigationBarItem(
            selected = selectedTab == "shop",
            onClick = { onTabSelected("shop") },
            icon = {
                Text(
                    text = "üõí",
                    style = MaterialTheme.typography.titleLarge
                )
            },
            label = { Text("–ú–∞–≥–∞–∑–∏–Ω") }
        )
    }
}

// –°–µ–∫—Ü–∏—è –ü—Ä–∏–≤—ã—á–µ–∫
@Composable
fun HabitsContentSection(
    habits: List<Quest>,
    character: Character,
    onIncrementHabit: (Quest) -> Unit,
    onDecrementHabit: (Quest) -> Unit,
    onDeleteQuest: (Quest) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(modifier = modifier) {
        if (habits.isEmpty()) {
            EmptyStateSection(
                title = "–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç",
                description = "–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É"
            )
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp)
            ) {
                items(habits) { habit ->
                    QuestItem(
                        quest = habit,
                        character = character,
                        onComplete = { },
                        onFail = { },
                        onIncrement = { onIncrementHabit(habit) },
                        onDecrement = { onDecrementHabit(habit) },
                        onDelete = { onDeleteQuest(habit) },
                        modifier = Modifier.padding(vertical = 4.dp)
                    )
                }
            }
        }
    }
}

// –°–µ–∫—Ü–∏—è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
@Composable
fun DailiesContentSection(
    dailies: List<Quest>,
    character: Character,
    onCompleteQuest: (Quest) -> Unit,
    onFailQuest: (Quest) -> Unit,
    onDeleteQuest: (Quest) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(modifier = modifier) {
        if (dailies.isEmpty()) {
            EmptyStateSection(
                title = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç",
                description = "–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É"
            )
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp)
            ) {
                items(dailies) { daily ->
                    QuestItem(
                        quest = daily,
                        character = character,
                        onComplete = { onCompleteQuest(daily) },
                        onFail = { onFailQuest(daily) },
                        onIncrement = { },
                        onDecrement = { },
                        onDelete = { onDeleteQuest(daily) },
                        modifier = Modifier.padding(vertical = 4.dp)
                    )
                }
            }
        }
    }
}

// –°–µ–∫—Ü–∏—è –†–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á
@Composable
fun TasksContentSection(
    tasks: List<Quest>,
    character: Character,
    onCompleteQuest: (Quest) -> Unit,
    onFailQuest: (Quest) -> Unit,
    onDeleteQuest: (Quest) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(modifier = modifier) {
        if (tasks.isEmpty()) {
            EmptyStateSection(
                title = "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç",
                description = "–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É"
            )
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp)
            ) {
                items(tasks) { task ->
                    QuestItem(
                        quest = task,
                        character = character,
                        onComplete = { onCompleteQuest(task) },
                        onFail = { onFailQuest(task) },
                        onIncrement = { },
                        onDecrement = { },
                        onDelete = { onDeleteQuest(task) },
                        modifier = Modifier.padding(vertical = 4.dp)
                    )
                }
            }
        }
    }
}

// –û–±—â–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@Composable
fun EmptyStateSection(
    title: String,
    description: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.headlineMedium,
            textAlign = androidx.compose.ui.text.style.TextAlign.Center
        )
        Text(
            text = description,
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.padding(top = 8.dp),
            textAlign = androidx.compose.ui.text.style.TextAlign.Center
        )
    }
}

@Composable
fun QuestItem(
    quest: Quest,
    character: Character,
    onComplete: () -> Unit,
    onFail: () -> Unit,
    onIncrement: () -> Unit,
    onDecrement: () -> Unit,
    onDelete: () -> Unit,
    modifier: Modifier = Modifier
) {
    var isDescriptionExpanded by remember { mutableStateOf(false) }

    val shouldTruncateDescription = quest.description.length > 50
    val displayDescription = if (shouldTruncateDescription && !isDescriptionExpanded) {
        quest.description.take(50) + "..."
    } else {
        quest.description
    }

    val dailyStatus = quest.getDailyStatus()

    Card(modifier = modifier.fillMaxWidth()) {
        Column(modifier = Modifier.padding(16.dp)) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = quest.title,
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.weight(1f)
                )

                IconButton(onClick = onDelete) {
                    Icon(Icons.Default.Delete, contentDescription = "–£–¥–∞–ª–∏—Ç—å", tint = MaterialTheme.colorScheme.error)
                }
            }

            // –¢–∏–ø –∑–∞–¥–∞—á–∏ –∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = quest.getQuestTypeDisplayName(),
                    style = MaterialTheme.typography.labelSmall,
                    color = MaterialTheme.colorScheme.secondary
                )

                if (quest.questType == "DAILY") {
                    Text(
                        text = dailyStatus,
                        style = MaterialTheme.typography.labelSmall,
                        color = when (dailyStatus) {
                            "—Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω—É–∂–Ω–æ" -> MaterialTheme.colorScheme.secondary
                            "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" -> MaterialTheme.colorScheme.primary
                            "–ø—Ä–æ–≤–∞–ª–µ–Ω–æ" -> MaterialTheme.colorScheme.error
                            else -> MaterialTheme.colorScheme.onSurface
                        }
                    )
                }
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            when (quest.questType) {
                "DAILY" -> {
                    val dayNames = mapOf(
                        "–ü–Ω" to "–ü–Ω", "–í—Ç" to "–í—Ç", "–°—Ä" to "–°—Ä",
                        "–ß—Ç" to "–ß—Ç", "–ü—Ç" to "–ü—Ç", "–°–±" to "–°–±", "–í—Å" to "–í—Å"
                    )
                    val activeDays = quest.weekDays.joinToString(", ") { day ->
                        dayNames[day] ?: day
                    }
                    Text(
                        text = "–î–Ω–∏: $activeDays",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.secondary,
                        modifier = Modifier.padding(top = 2.dp)
                    )
                }
                "TASK" -> {
                    quest.deadline?.let { deadline ->
                        val status = quest.getDeadlineStatus()
                        Text(
                            text = "–î–µ–¥–ª–∞–π–Ω: $status",
                            style = MaterialTheme.typography.labelSmall,
                            color = when {
                                quest.isOverdue -> MaterialTheme.colorScheme.error
                                status.contains("—Å–µ–≥–æ–¥–Ω—è") -> MaterialTheme.colorScheme.primary
                                else -> MaterialTheme.colorScheme.secondary
                            },
                            modifier = Modifier.padding(top = 2.dp)
                        )
                    }
                }
                "HABIT" -> {
                    Text(
                        text = "–°—á–µ—Ç—á–∏–∫: ${quest.habitCounter}",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.secondary,
                        modifier = Modifier.padding(top = 2.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.height(4.dp))

            if (quest.description.isNotEmpty()) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable(enabled = shouldTruncateDescription) {
                            isDescriptionExpanded = !isDescriptionExpanded
                        }
                ) {
                    Text(
                        text = "–û–ø–∏—Å–∞–Ω–∏–µ: $displayDescription",
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.padding(top = 4.dp)
                    )

                    if (shouldTruncateDescription) {
                        Text(
                            text = if (isDescriptionExpanded) "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–≤–µ—Ä–Ω—É—Ç—å" else "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                            style = MaterialTheme.typography.labelSmall,
                            color = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }
                }
            }

            // –°–ª–æ–∂–Ω–æ—Å—Ç—å
            Text(
                text = "–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${quest.getDifficultyDisplayName()}",
                style = MaterialTheme.typography.labelMedium,
                modifier = Modifier.padding(top = 8.dp)
            )

            Spacer(modifier = Modifier.height(12.dp))

            // –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            when (quest.questType) {
                "HABIT" -> {
                    // –î–ª—è –ø—Ä–∏–≤—ã—á–µ–∫: –∫–Ω–æ–ø–∫–∏ + –∏ -
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Button(
                            onClick = onDecrement,
                            modifier = Modifier.weight(1f).padding(end = 4.dp),
                            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error)
                        ) {
                            Text("-")
                        }

                        Button(
                            onClick = onIncrement,
                            modifier = Modifier.weight(1f).padding(start = 4.dp),
                            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
                        ) {
                            Text("+")
                        }
                    }
                }
                "DAILY" -> {
                    // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    if (quest.isActiveToday()) {
                        if (!quest.isCompleted) {
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                Button(
                                    onClick = onFail,
                                    modifier = Modifier.weight(1f).padding(end = 4.dp)
                                ) {
                                    Text("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ")
                                }

                                Button(
                                    onClick = onComplete,
                                    modifier = Modifier.weight(1f).padding(start = 4.dp)
                                ) {
                                    Text("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                                }
                            }
                        } else {
                            Text(
                                text = if (quest.isFailed) "‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞" else "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                                style = MaterialTheme.typography.bodyMedium,
                                color = if (quest.isFailed) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary,
                                modifier = Modifier.align(Alignment.CenterHorizontally)
                            )
                        }
                    } else {
                        // –ó–∞–¥–∞—á–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        Text(
                            text = "üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.secondary,
                            modifier = Modifier.align(Alignment.CenterHorizontally)
                        )
                    }
                }
                else -> {
                    // –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á
                    if (!quest.isCompleted && quest.canBeCompleted()) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Button(
                                onClick = onFail,
                                modifier = Modifier.weight(1f).padding(end = 4.dp),
                                enabled = quest.canBeFailed()
                            ) {
                                Text("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ")
                            }

                            Button(
                                onClick = onComplete,
                                modifier = Modifier.weight(1f).padding(start = 4.dp),
                                enabled = quest.canBeCompleted()
                            ) {
                                Text("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                            }
                        }
                    } else {
                        Text(
                            text = when {
                                quest.isFailed -> "‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞"
                                !quest.canBeCompleted() && quest.questType == "TASK" -> "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ"
                                else -> "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                            },
                            style = MaterialTheme.typography.bodyMedium,
                            color = when {
                                quest.isFailed -> MaterialTheme.colorScheme.error
                                !quest.canBeCompleted() && quest.questType == "TASK" -> MaterialTheme.colorScheme.error
                                else -> MaterialTheme.colorScheme.primary
                            },
                            modifier = Modifier.align(Alignment.CenterHorizontally)
                        )
                    }
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
private fun getClassDisplayName(characterClass: String): String {
    return when (characterClass) {
        "WARRIOR" -> "–í–æ–∏–Ω"
        "ARCHER" -> "–õ—É—á–Ω–∏–∫"
        "MAGE" -> "–ú–∞–≥"
        else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
}