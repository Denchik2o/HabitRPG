package com.example.habitrpg.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.horizontalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.example.habitrpg.data.model.Character
import com.example.habitrpg.data.model.InventoryItem
import com.example.habitrpg.data.model.ShopCategory

@Composable
fun ShopScreen(
    character: Character,
    shopItems: List<InventoryItem>,
    inventoryItems: List<InventoryItem>,
    onBuyItem: (InventoryItem) -> Unit,
    modifier: Modifier = Modifier
) {
    var selectedCategory by remember { mutableStateOf(ShopCategory.ALL) }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–ª–∞—Å—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —É–±–∏—Ä–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–µ—Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    val availableShopItems = remember(shopItems, inventoryItems, character.characterClass) {
        shopItems.filter { shopItem ->
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å
            val classMatches = shopItem.allowedClass == com.example.habitrpg.data.model.ItemClass.ALL ||
                    shopItem.allowedClass.name == character.characterClass

            // –î–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ
            val isAvailable = if (shopItem.isConsumable) {
                true
            } else {
                // –î–ª—è –Ω–µ—Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ
                inventoryItems.none { inventoryItem ->
                    inventoryItem.name == shopItem.name &&
                            inventoryItem.itemType == shopItem.itemType
                }
            }

            classMatches && isAvailable
        }
    }

    Column(modifier = modifier.fillMaxSize()) {
        // –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
        ScrollableCategoryFilter(
            selectedCategory = selectedCategory,
            onCategorySelected = { selectedCategory = it },
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)
        )

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        val filteredItems = if (selectedCategory == ShopCategory.ALL) {
            availableShopItems
        } else {
            availableShopItems.filter {
                when (selectedCategory) {
                    ShopCategory.WEAPONS -> it.itemType == com.example.habitrpg.data.model.ItemType.WEAPON
                    ShopCategory.ARMOR -> it.itemType in listOf(
                        com.example.habitrpg.data.model.ItemType.HELMET,
                        com.example.habitrpg.data.model.ItemType.BREASTPLATE,
                        com.example.habitrpg.data.model.ItemType.GREAVES
                    )
                    ShopCategory.ACCESSORIES -> it.itemType == com.example.habitrpg.data.model.ItemType.ACCESSORY
                    ShopCategory.CONSUMABLES -> it.itemType == com.example.habitrpg.data.model.ItemType.CONSUMABLE
                    else -> true
                }
            }
        }

        if (filteredItems.isEmpty()) {
            EmptyShopState(
                selectedCategory = selectedCategory,
                characterClass = character.characterClass,
                modifier = Modifier.fillMaxSize()
            )
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp)
            ) {
                items(filteredItems) { item ->
                    ShopItemCard(
                        item = item,
                        character = character,
                        inventoryItems = inventoryItems,
                        onBuy = { onBuyItem(item) },
                        modifier = Modifier.padding(vertical = 4.dp)
                    )
                }
            }
        }
    }
}

@Composable
fun ScrollableCategoryFilter(
    selectedCategory: ShopCategory,
    onCategorySelected: (ShopCategory) -> Unit,
    modifier: Modifier = Modifier
) {
    val scrollState = rememberScrollState()

    Row(
        modifier = modifier
            .fillMaxWidth()
            .horizontalScroll(scrollState),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        ShopCategory.values().forEach { category ->
            FilterChip(
                selected = selectedCategory == category,
                onClick = { onCategorySelected(category) },
                label = { Text(category.displayName) },
                modifier = Modifier.padding(vertical = 4.dp)
            )
        }
    }
}

@Composable
fun ShopItemCard(
    item: InventoryItem,
    character: Character,
    inventoryItems: List<InventoryItem>,
    onBuy: () -> Unit,
    modifier: Modifier = Modifier
) {
    val canAfford = character.gold >= item.goldValue
    val canUse = item.canUse(character)
    val isConsumable = item.itemType == com.example.habitrpg.data.model.ItemType.CONSUMABLE

    // –î–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    val consumableCount = if (isConsumable) {
        inventoryItems.find { it.name == item.name }?.stackSize ?: 0
    } else {
        0
    }

    Card(modifier = modifier.fillMaxWidth()) {
        Column(modifier = Modifier.padding(16.dp)) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = item.getDisplayName(),
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = item.itemType.displayName,
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.secondary
                    )
                }
                Text(
                    text = "${item.goldValue} ü™ô",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Bold,
                    color = if (canAfford) MaterialTheme.colorScheme.primary
                    else MaterialTheme.colorScheme.error
                )
            }

            // –û–ø–∏—Å–∞–Ω–∏–µ
            Text(
                text = item.description,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(vertical = 8.dp)
            )

            // –î–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            if (isConsumable && consumableCount > 0) {
                Text(
                    text = "–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: $consumableCount —à—Ç",
                    style = MaterialTheme.typography.labelSmall,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.padding(bottom = 4.dp)
                )
            }

            // –ë–æ–Ω—É—Å—ã - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
            BonusStatsRow(item = item)

            // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ —É—Ä–æ–≤–Ω—é, —Ç–∞–∫ –∫–∞–∫ –ø–æ –∫–ª–∞—Å—Å—É —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)
            if (!canUse) {
                Text(
                    text = "–¢—Ä–µ–±—É–µ—Ç—Å—è: ${item.requiredLevel} —É—Ä–æ–≤–µ–Ω—å",
                    style = MaterialTheme.typography.labelSmall,
                    color = MaterialTheme.colorScheme.error,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }

            // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
            Button(
                onClick = onBuy,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 8.dp),
                enabled = canAfford && canUse,
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (canAfford) MaterialTheme.colorScheme.primary
                    else MaterialTheme.colorScheme.error
                )
            ) {
                Text(if (canAfford) "–ö—É–ø–∏—Ç—å" else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")
            }
        }
    }
}

@Composable
fun BonusStatsRow(
    item: InventoryItem,
    modifier: Modifier = Modifier
) {
    val bonuses = mutableListOf<@Composable () -> Unit>()

    if (item.hpBonus > 0) {
        bonuses.add { Text("‚ù§Ô∏è +${item.hpBonus}", modifier = Modifier.padding(end = 16.dp)) }
    }
    if (item.mpBonus > 0) {
        bonuses.add { Text("üîµ +${item.mpBonus}", modifier = Modifier.padding(end = 16.dp)) }
    }
    if (item.attackBonus > 0) {
        bonuses.add { Text("‚öîÔ∏è +${item.attackBonus}", modifier = Modifier.padding(end = 16.dp)) }
    }
    if (item.defenseBonus > 0) {
        bonuses.add { Text("üõ°Ô∏è +${item.defenseBonus}") }
    }

    if (bonuses.isNotEmpty()) {
        Row(
            modifier = modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Start
        ) {
            bonuses.forEach { bonus ->
                bonus()
            }
        }
    }
}

@Composable
fun EmptyShopState(
    selectedCategory: ShopCategory,
    characterClass: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier.padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üì¶",
            style = MaterialTheme.typography.displayMedium
        )
        Text(
            text = when {
                selectedCategory != ShopCategory.ALL -> "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"${selectedCategory.displayName}\" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
                else -> "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
            },
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.secondary,
            modifier = Modifier.padding(top = 16.dp),
            textAlign = androidx.compose.ui.text.style.TextAlign.Center
        )
        Text(
            text = "–í–∞—à –∫–ª–∞—Å—Å: ${getClassDisplayName(characterClass)}",
            style = MaterialTheme.typography.labelSmall,
            color = MaterialTheme.colorScheme.secondary,
            modifier = Modifier.padding(top = 8.dp)
        )
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
private fun getClassDisplayName(characterClass: String): String {
    return when (characterClass) {
        "WARRIOR" -> "–í–æ–∏–Ω"
        "ARCHER" -> "–õ—É—á–Ω–∏–∫"
        "MAGE" -> "–ú–∞–≥"
        else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
}